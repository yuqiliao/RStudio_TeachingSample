df6 <- df4 %>% mutate(Percent = ifelse(Level %in% c("Below Low"), df$Percent, df5$Percent), df_id ="6" )
# Combine all 6 data frames into 1 list
ls <- list(df1, df2, df3, df4, df5, df6)
# Inspect `ls`
ls
############################################### Slide 30
# Use the `tween_states` function from the `tweenr` package to interpolate data in between each state/stage
tf <- tween_states(ls, tweenlength= 1, statelength=0, ease='cubic-in-out', nframes=100)
# Inspect `tf`
tf
View(tf)
max(tf$.frame)
i = 50
# print out which frame it is working on
print(paste0("working on the ", i, "th frame"))
# create plot in each frame, saved as `g`
g <- ggplot(data = subset(tf, .frame == i), mapping = aes(x = Country, y = Percent, fill = Level, .frame = i)) +
geom_col(width = 0.7)  +
geom_text(data = subset(tf, .frame == max(tf$.frame)), aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0),
limits = c(0,100)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
g
pause_frames
i = 90
# print out which frame it is working on
print(paste0("working on the ", i, "th frame"))
# create plot in each frame, saved as `g`
g <- ggplot(data = subset(tf, .frame == i), mapping = aes(x = Country, y = Percent, fill = Level, .frame = i)) +
geom_col(width = 0.7)  +
geom_text(data = subset(tf, .frame == max(tf$.frame)), aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0),
limits = c(0,100)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
g
library(gganimate)
?transition_states
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
knitr::include_graphics('presentationFigures/pirlsLogo.jpg')
# load the required libraries
library(ggplot)
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
knitr::include_graphics('presentationFigures/pirlsLogo.jpg')
# load the required libraries
library(ggplot2)
library(gganimte)
# load the required libraries
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
knitr::include_graphics('presentationFigures/pirlsLogo.jpg')
# load the required libraries
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
# Create a gganimate object
anim <- basePlot +
# set `states = Country` to reveal one stacked bar (for each jurisdiciton) at a time
{{transition_states(states = Country)}}
# View animation
anim
anim2 <- basePlot +
# set `states = Country` to reveal one stacked bar (for each jurisdiciton) at a time
{{transition_states(states = Level)}}
# View animation
anim2
# Create a gganimate object
basePlot +
transition_states(states = Level)
anim_test <- basePlot +
transition_states(states = Level)
anim_test
anim_save(filename = "epirls_gganimate_test.gif", animation = anim_test, path = getwd())
experiment <- basePlot +
# try `states = Percent`
transition_states(states = Percent)
experiment
?shadow_trail
knitr::include_graphics("presentationFigures/epirls_gganimate_test.gif")
knitr::include_graphics("presentationFigures/epirls_gganimate_test.gif")
unlink('index_cache', recursive = TRUE)
getwd()
## This function will read an simple .Rmd file, strip all of the .Rmd specific code indicators (which the R console can't interpret) and replace the beginning of each non-code line with the “#'” indicator
## sourced from http://rstudio-pubs-static.s3.amazonaws.com/12734_0a38887f19a34d92b7311a2c9cb15022.html
## added ability to attach slide number based on the slide separator, (i.e. pattern = "========================================================")
rmd2rscript <- function(inFile, slideNumber = TRUE, removeSlideText = TRUE){
# read the file
fileIn <- readLines(inFile)
# identify the start of code blocks
cdStrt <- which(grepl(fileIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(fileIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# identify where slide indiciators are
if(slideNumber){
slides <- which(grepl(fileIn, pattern = "========================================================", perl = TRUE))
# identify the end of code blocks
slideNo <- 1:length(slides)
fileIn[slides] <- paste("# * Slide", slideNo)
}
# define an expansion function
# strip code block indacators
fileIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(fileIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
fileIn[i] <- paste("#' ", fileIn[i], sep = "")
}
fileIn <- gsub(fileIn, pattern = "#' # \\* ", replacement = "############################################### ")
if(removeSlideText) {
toMatch <- c("^#' ")
fileIn <- fileIn[which(!grepl(fileIn, pattern = paste(toMatch,collapse="|")))]
}
# remove image links
fileIn <- fileIn[!grepl(fileIn, pattern = "knitr::include_graphics|options\\(width|useFancyQuotes|scipen", perl = TRUE)]
# create an output file
nm <- strsplit(inFile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "_Script.R", sep = ""), "w")
for(i in 1:length(fileIn)){
cat(fileIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
setwd("/Users/teachingaccount/Desktop/GIT/RStudio_TeachingSample")
rmd2rscript("index.Rmd")
## This function will read an simple .Rmd file, strip all of the .Rmd specific code indicators (which the R console can't interpret) and replace the beginning of each non-code line with the “#'” indicator
## sourced from http://rstudio-pubs-static.s3.amazonaws.com/12734_0a38887f19a34d92b7311a2c9cb15022.html
## added ability to attach slide number based on the slide separator, (i.e. pattern = "========================================================")
rmd2rscript <- function(inFile, slideNumber = TRUE, removeSlideText = TRUE){
# read the file
fileIn <- readLines(inFile)
# identify the start of code blocks
cdStrt <- which(grepl(fileIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(fileIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# identify where slide indiciators are
if(slideNumber){
slides <- which(grepl(fileIn, pattern = "========================================================", perl = TRUE))
# identify the end of code blocks
slideNo <- 1:length(slides)
fileIn[slides] <- paste("# * Slide", slideNo)
}
# define an expansion function
# strip code block indacators
fileIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(fileIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
fileIn[i] <- paste("#' ", fileIn[i], sep = "")
}
fileIn <- gsub(fileIn, pattern = "#' # \\* ", replacement = "############################################### ")
if(removeSlideText) {
toMatch <- c("^#' ")
fileIn <- fileIn[which(!grepl(fileIn, pattern = paste(toMatch,collapse="|")))]
}
# remove image links
fileIn <- fileIn[!grepl(fileIn, pattern = "knitr::include_graphics|options\\(width|useFancyQuotes|scipen", perl = TRUE)]
# create an output file
nm <- strsplit(inFile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "_Script.R", sep = ""), "w")
for(i in 1:length(fileIn)){
cat(fileIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
setwd("/Users/teachingaccount/Desktop/GIT/RStudio_TeachingSample")
rmd2rscript("index.Rmd")
## This function will read an simple .Rmd file, strip all of the .Rmd specific code indicators (which the R console can't interpret) and replace the beginning of each non-code line with the “#'” indicator
## sourced from http://rstudio-pubs-static.s3.amazonaws.com/12734_0a38887f19a34d92b7311a2c9cb15022.html
## added ability to attach slide number based on the slide separator, (i.e. pattern = "========================================================")
rmd2rscript <- function(inFile, slideNumber = TRUE, removeSlideText = TRUE){
# read the file
fileIn <- readLines(inFile)
# identify the start of code blocks
cdStrt <- which(grepl(fileIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(fileIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# identify where slide indiciators are
if(slideNumber){
slides <- which(grepl(fileIn, pattern = "========================================================", perl = TRUE))
# identify the end of code blocks
slideNo <- 1:length(slides)
fileIn[slides] <- paste("# * Slide", slideNo)
}
# define an expansion function
# strip code block indacators
fileIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(fileIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
fileIn[i] <- paste("#' ", fileIn[i], sep = "")
}
fileIn <- gsub(fileIn, pattern = "#' # \\* ", replacement = "############################################### ")
if(removeSlideText) {
toMatch <- c("^#' ")
fileIn <- fileIn[which(!grepl(fileIn, pattern = paste(toMatch,collapse="|")))]
}
# remove image links
fileIn <- fileIn[!grepl(fileIn, pattern = "knitr::include_graphics|options\\(width|useFancyQuotes|scipen", perl = TRUE)]
# create an output file
nm <- strsplit(inFile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "_Script.R", sep = ""), "w")
for(i in 1:length(fileIn)){
cat(fileIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
setwd("/Users/teachingaccount/Desktop/GIT/RStudio_TeachingSample")
rmd2rscript("index.Rmd")
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
library(dplyr)
############################################### Slide 18
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
############################################### Slide 19
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
############################################### Slide 20
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
basePlot +
{{transition_states(states = Percent)}}
## This function will read an simple .Rmd file, strip all of the .Rmd specific code indicators (which the R console can't interpret) and replace the beginning of each non-code line with the “#'” indicator
## sourced from http://rstudio-pubs-static.s3.amazonaws.com/12734_0a38887f19a34d92b7311a2c9cb15022.html
## added ability to attach slide number based on the slide separator, (i.e. pattern = "========================================================")
rmd2rscript <- function(inFile, slideNumber = TRUE, removeSlideText = TRUE){
# read the file
fileIn <- readLines(inFile)
# identify the start of code blocks
cdStrt <- which(grepl(fileIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(fileIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# identify where slide indiciators are
if(slideNumber){
slides <- which(grepl(fileIn, pattern = "========================================================", perl = TRUE))
# identify the end of code blocks
slideNo <- 1:length(slides)
fileIn[slides] <- paste("# * Slide", slideNo)
}
# define an expansion function
# strip code block indacators
fileIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(fileIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
fileIn[i] <- paste("#' ", fileIn[i], sep = "")
}
fileIn <- gsub(fileIn, pattern = "#' # \\* ", replacement = "############################################### ")
if(removeSlideText) {
toMatch <- c("^#' ")
fileIn <- fileIn[which(!grepl(fileIn, pattern = paste(toMatch,collapse="|")))]
}
# remove image links
fileIn <- fileIn[!grepl(fileIn, pattern = "knitr::include_graphics|options\\(width|useFancyQuotes|scipen", perl = TRUE)]
# create an output file
nm <- strsplit(inFile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "_Script.R", sep = ""), "w")
for(i in 1:length(fileIn)){
cat(fileIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
setwd("/Users/teachingaccount/Desktop/GIT/RStudio_TeachingSample")
rmd2rscript("index.Rmd")
############################################### Slide 12
############################################### Slide 13
############################################### Slide 14
############################################### Slide 15
############################################### Slide 16
############################################### Slide 17
# load the required libraries
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
library(dplyr)
############################################### Slide 18
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
############################################### Slide 19
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
############################################### Slide 20
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
basePlot +
{{transition_states(states = Percent)}}
?transition_states
# load the required libraries
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
library(dplyr)
############################################### Slide 18
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
############################################### Slide 20
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
basePlot +
{{transition_states(states = Percent)}}
############################################### Slide 9
############################################### Slide 10
############################################### Slide 11
############################################### Slide 12
############################################### Slide 13
############################################### Slide 14
############################################### Slide 15
############################################### Slide 16
############################################### Slide 17
# load the required libraries
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
library(dplyr)
############################################### Slide 18
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
############################################### Slide 19
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
############################################### Slide 20
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
basePlot +
{{transition_states(states = Percent)}}
xaringan:::inf_mr()
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
knitr::include_graphics('presentationFigures/pirlsLogo.jpg')
# load the required libraries
library(ggplot2)
library(gganimate)
library(tweenr)
library(animation)
library(dplyr)
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
# Create a gganimate object
anim <- basePlot +
# set `states = Country` to reveal one stacked bar (for each jurisdiciton) at a time
{{transition_states(states = Country)}}
# View animation
anim
knitr::include_graphics("presentationFigures/epirls_gganimate_test.gif")
knitr::include_graphics("presentationFigures/epirls_gganimate_test.gif")
experiment <- basePlot +
transition_states(states = Percent)
experiment
# Create a gganimate object
anim <- anim +
# keep earlier frames while revealing new frames
{{shadow_trail()}}
# View animation
anim
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
