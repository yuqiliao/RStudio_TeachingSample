str_view(x, "an")
?str_view
x <- c("apple", "banana", "pear" ""`\")
str_view(x, "an")
?str_view
\\"\\'\\\\
x <- c("apple", "banana", "pear" ""`\\")
str_view(x, "an")
?str_view
\\"\\'\\\\
x <- c("apple", "banana", "pear" '"'\')
str_view(x, "an")
?str_view
\\"\\'\\\\
x <- c("apple", "banana", "pear" '"'\\\')
str_view(x, "an")
?str_view
\\"\\'\\\\
?str_view
x <- c("apple", "banana", "pear" "\"'\\")
x <- c("apple", "banana", "pear", "\"'\\")
x
writeLines(x)
\\"\\'\\\\
str_view("\"'\\", "\"'\\\\")
\\"\\'\\\\
str_view(x, "\"'\\\\")
x <- c("apple", "banana", "pear", "'")
writeLines(x)
x
\\"\\'\\\\
str_view(x, "'")
\\"\\'\\\\
str_view(x, "\'")
\\"\\'\\\\
str_view(x, "\\'")
fruit
\\"\\'\\\\
str_view(x, "\\'")
str_view(fruit, "(..)\\1", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(fruit, "(..)\\1", match = NA)
\\"\\'\\\\
str_view(x, "\\'")
str_view(fruit, "(..)\\1", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(fruit, "(..)\\2", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(fruit, "(..)\\3", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("hahahaha","aaaa", "cdssw2", "dfdfd3"), "(..)\\3", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("hahahaha","aaaa", "cdssw2", "dfdfd3"), "(..)\\1", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("hahahaha","aaa", "cdssw2", "dfdfd3"), "(..)\\1", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("hahahaha","aaaaa", "cdssw2", "dfdfd3"), "(..)\\1", match = TRUE)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("hahahaha","aaaaa", "cdssw2", "dfdfd3"), "(..)\\1", match = TRUE)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
noun <- "(a|the) ([^ ]+)"
noun
sentences
sentences %>%
str_subset(noun)
sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It's easy to tell the depth of a well."), "(..)\\1", match = NA)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(..)\\1", match = NA)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ]+)", match = NA)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^]+)", match = NA)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^]+)", match = NA)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^.]+)", match = NA)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
\\"\\'\\\\
str_view(x, "\\'")
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ])", match = NA)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([.])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([/.])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([p])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([p*])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) (p*)", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the)*", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the)([^abc])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the)([^ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the)([^ ])", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the)([^ ]+)", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ]+)", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ]*)", match = NA)
str_view(c("The birch canoe slid on the smooth planks.","Glue the sheet to the dark blue background.", "It is easy to tell the depth of a well."), "(a|the) ([^ ]?)", match = NA)
?switch
require(stats)
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
x
centre(x, "mean")
centre(x, "median")
centre(x, "trimmed")
?if
?if
?if()
?ifelse
?if
output <- vector("double", length(df))
output
seq_along(df)
for (i in seq_along(df)) {
output[[i]] <- mean(df[[i]])
}
output
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df
seq_along(df)
for (i in seq_along(df)) {
output[[i]] <- mean(df[[i]])
}
output
mod <- lm(n ~ wday, data = daily)
osVersion
library(stringr)
str_detect(string = osVersion, pattern = "macOS")
getwd()
### prep code for teaching animation
library(gganimate)
ggplot(iris, aes(x = Petal.Width, y = Petal.Length))
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
plot(p)
p
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim
setwd("~/Desktop/Files/Learning:Online Classes/RStudio/Teaching exam/sample lesson/GIT/RStudio_TeachingSample")
knitr::include_graphics('presentationFigures/airLogo.png')
knitr::include_graphics('presentationFigures/pirlsLogo.jpg')
# define a list of packages
reqpkg <- c("ggplot2", "gganimate", "tweenr", "animation", "tidyverse")
# install and load each package defined above
sapply(reqpkg, function(pkgi) {
if (!pkgi %in% installed.packages()) {
install.packages(pkgi, repos = "http://cran.us.r-project.org")
}
library(pkgi, character.only = TRUE)
})
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrame.rds"))
df <- df %>% filter(Country %in% c("Singapore", "Canada", "United States", "Portugal"))
df <- df %>% select(Country, Level, Percent)
#inspect `df`
df
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
# Create a gganimate object
anim <- basePlot +
# set `states = Country` to reveal one stacked bar (for each jurisdiciton) at a time
{{transition_states(states = Country)}}
# View animation
anim
# Create a gganimate object
anim <- anim +
# keep earlier frames while revealing new frames
{{shadow_trail()}}
# View animation
anim
# Create a gganimate object
anim <- anim +
# specify the rate of change of values between frames (default to be `linear`)
{{ease_aes('cubic-in-out')}}
# View animation
anim
# use `animate` to achieve end pause
anim_endpause <-
{{animate(anim, nframes = 100, fps = 20, end_pause = 20, rewind = FALSE)}}
# View animation
anim_endpause
experiment <- basePlot +
# try `states = Percent`
transition_states(states = Percent)
experiment
# Create 6 data frames that stores the bar chart in 6 "stagies"
df1 <- df %>% mutate(Percent = 0, df_id = "1")
df2 <- df1 %>% mutate(Percent = ifelse(Level %in% c("Advanced"), df$Percent, df1$Percent), df_id = "2")
df3 <- df2 %>% mutate(Percent = ifelse(Level %in% c("High"), df$Percent, df2$Percent), df_id = "3")
df4 <- df3 %>% mutate(Percent = ifelse(Level %in% c("Intermediate"), df$Percent, df3$Percent), df_id = "4")
df5 <- df4 %>% mutate(Percent = ifelse(Level %in% c("Low"), df$Percent, df4$Percent), df_id = "5")
df6 <- df4 %>% mutate(Percent = ifelse(Level %in% c("Below Low"), df$Percent, df5$Percent), df_id ="6" )
# Combine all 6 data frames into 1 list
ls <- list(df1, df2, df3, df4, df5, df6)
# Inspect `ls`
ls
# Use the `tween_states` function from the `tweenr` package to interpolate data in between each stagies/states
tf <- tween_states(ls, tweenlength= 1, statelength=0, ease='cubic-in-out', nframes=100)
# Inspect `tf`
tf
# define where we want the animation to "pause"
pause_frames <- c(21, 41, 61, 81, 100)
outputPath <- getwd()
# use `saveGIF` from `animation` to create and save GIF
saveGIF({
for (i in 1:max(tf$.frame)) {
# print out which frame it is working on
print(paste0("working on the ", i, "th frame"))
# create plot in each frame, saved as `g`
g <- ggplot(data = subset(tf, .frame == i), mapping = aes(x = Country, y = Percent, fill = Level, .frame = i)) +
geom_col(width = 0.7)  +
geom_text(data = subset(tf, .frame == max(tf$.frame)), aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0),
limits = c(0,100)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
# draw `g` once for each frame
grid::grid.draw(g)
# if i is a pause frame, draw a few more
if (i %in% pause_frames){
replicate(15,grid::grid.draw(g))}
# if i is the last frame, draw even more
if (i == max(tf$.frame)){
replicate(100,grid::grid.draw(g))
}
}
},
# specify the pathway and name of the gif output, as well as the interval, width, and height
movie.name = paste0(outputPath,"epirls_tweenr.gif"), interval = .02, ani.width = 600, ani.height = 400)
getwd()
paste0(outputPath,"epirls_tweenr.gif")
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrame.rds"))
df <- df %>% filter(Country %in% c("Singapore", "Canada", "United States", "Portugal"))
df <- df %>% select(Country, Level, Percent)
#inspect `df`
df
View(df)
saveRDS(df, file = "ePIRLSProcessedDataFrameSelectedCountries.rds")
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountrie.rds"))
readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountrie.rds"))
getwd()
knitr::include_graphics('presentationFigures/RStudio-Logo-White.png')
knitr::include_graphics('presentationFigures/pirlsLogo.jpg')
# define a list of packages
reqpkg <- c("ggplot2", "gganimate", "tweenr", "animation", "tidyverse")
# install and load each package defined above
sapply(reqpkg, function(pkgi) {
if (!pkgi %in% installed.packages()) {
install.packages(pkgi, repos = "http://cran.us.r-project.org")
}
library(pkgi, character.only = TRUE)
})
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountrie.rds"))
library(readRDS)
?readRDS
paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountrie.rds")
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountrie.rds"))
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountrie.rds"))
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrame.rds"))
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
View(df)
rmd2rscript <- function(inFile, slideNumber = TRUE, removeSlideText = TRUE){
# read the file
fileIn <- readLines(inFile)
# identify the start of code blocks
cdStrt <- which(grepl(fileIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(fileIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# identify where slide indiciators are
if(slideNumber){
slides <- which(grepl(fileIn, pattern = "========================================================", perl = TRUE))
# identify the end of code blocks
slideNo <- 1:length(slides)
fileIn[slides] <- paste("# * Slide", slideNo)
}
# define an expansion function
# strip code block indacators
fileIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(fileIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
fileIn[i] <- paste("#' ", fileIn[i], sep = "")
}
fileIn <- gsub(fileIn, pattern = "#' # \\* ", replacement = "############################################### ")
if(removeSlideText) {
toMatch <- c("^#' ")
fileIn <- fileIn[which(!grepl(fileIn, pattern = paste(toMatch,collapse="|")))]
}
# remove image links
fileIn <- fileIn[!grepl(fileIn, pattern = "knitr::include_graphics|options\\(width|useFancyQuotes|scipen", perl = TRUE)]
# create an output file
nm <- strsplit(inFile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "_Script.R", sep = ""), "w")
for(i in 1:length(fileIn)){
cat(fileIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
getwd()
setwd("/Users/Yuqi/Desktop/Files/Learning:Online Classes/RStudio/Teaching exam/sample lesson/GIT/RStudio_TeachingSample")
rmd2rscript("creatingAnimation.Rmd")
############################################### Slide 9
############################################### Slide 10
############################################### Slide 11
############################################### Slide 12
############################################### Slide 13
############################################### Slide 14
############################################### Slide 15
############################################### Slide 16
############################################### Slide 17
# define a list of packages
reqpkg <- c("ggplot2", "gganimate", "tweenr", "animation", "tidyverse")
# install and load each package defined above
sapply(reqpkg, function(pkgi) {
if (!pkgi %in% installed.packages()) {
install.packages(pkgi, repos = "http://cran.us.r-project.org")
}
library(pkgi, character.only = TRUE)
})
############################################### Slide 18
#read in pre-processed data file
df <- readRDS(paste0(getwd(), "/ePIRLSProcessedDataFrameSelectedCountries.rds"))
#inspect `df`
df
############################################### Slide 19
# Define other plot aesthetics
cols <- c("#982F3A", "#B3B3B3", "#3D3629", "#BA8752", "#143875")
plotCaption <- ("SOURCE: International Association for the Evaluation of Educational Achievement (IEA), \nProgress in International Reading Literacy Study (PIRLS), 2016.")
plotTitle <- c("Percentage of fourth-grade students reaching the ePIRLS \ninternational benchmarks in online informational reading, \nby education system: 2016")
############################################### Slide 20
# Create a static plot (base plot)
basePlot <- ggplot(data = df, mapping = aes(x = Country, y = Percent, fill = Level)) +
geom_col(width = 0.7)  +
geom_text(aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
basePlot
############################################### Slide 21
############################################### Slide 22
# Create a gganimate object
anim <- basePlot +
# set `states = Country` to reveal one stacked bar (for each jurisdiciton) at a time
{{transition_states(states = Country)}}
# View animation
anim
df
basePlot +
transition_states(states = Level)
?transition_states
df1 <- df %>% mutate(Percent = 0, df_id = "1")
df2 <- df1 %>% mutate(Percent = ifelse(Level %in% c("Advanced"), df$Percent, df1$Percent), df_id = "2")
df3 <- df2 %>% mutate(Percent = ifelse(Level %in% c("High"), df$Percent, df2$Percent), df_id = "3")
df4 <- df3 %>% mutate(Percent = ifelse(Level %in% c("Intermediate"), df$Percent, df3$Percent), df_id = "4")
df5 <- df4 %>% mutate(Percent = ifelse(Level %in% c("Low"), df$Percent, df4$Percent), df_id = "5")
df6 <- df4 %>% mutate(Percent = ifelse(Level %in% c("Below Low"), df$Percent, df5$Percent), df_id ="6" )
# Combine all 6 data frames into 1 list
ls <- list(df1, df2, df3, df4, df5, df6)
# Inspect `ls`
ls
############################################### Slide 30
# Use the `tween_states` function from the `tweenr` package to interpolate data in between each state/stage
tf <- tween_states(ls, tweenlength= 1, statelength=0, ease='cubic-in-out', nframes=100)
# Inspect `tf`
tf
View(tf)
max(tf$.frame)
i = 50
# print out which frame it is working on
print(paste0("working on the ", i, "th frame"))
# create plot in each frame, saved as `g`
g <- ggplot(data = subset(tf, .frame == i), mapping = aes(x = Country, y = Percent, fill = Level, .frame = i)) +
geom_col(width = 0.7)  +
geom_text(data = subset(tf, .frame == max(tf$.frame)), aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0),
limits = c(0,100)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
g
pause_frames
i = 90
# print out which frame it is working on
print(paste0("working on the ", i, "th frame"))
# create plot in each frame, saved as `g`
g <- ggplot(data = subset(tf, .frame == i), mapping = aes(x = Country, y = Percent, fill = Level, .frame = i)) +
geom_col(width = 0.7)  +
geom_text(data = subset(tf, .frame == max(tf$.frame)), aes(label = round(Percent)), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = cols, breaks = rev(levels(df$Level))) +
coord_flip() +
scale_y_continuous(breaks = c(0, 20, 40, 60, 80, 100),
labels = c(0, 20, 40, 60, 80, 100),
expand = c(0, 0, 0, 0),
limits = c(0,100)) +
labs(x = "", y = "Percent", title = plotTitle, caption = plotCaption) +
theme_minimal()
g
